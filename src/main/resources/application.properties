server.port=8081
server.servlet.context-path=/cloud-config-service-b
spring.profiles.active=qa
# you can run with dev, default, prod profile instead of above `qa` spring profile.
# you can even comment out (not add) above profile active line for testing without profile.
# you can reference to this below repository for knowing about spring profile
# https://github.com/yewin-mm/spring-profile-properties-yml-file

# below application name is keypoint to choose which config file will use for this application as there can have many config files under config repository.
# because there might have many microservice applications in real world which use only one config repository and might put many config properties files in that config repository.
# you need to change this application name as per your config file name (map that properties file with this application) which is at another repository,
# eg. if you changed your config file name (which is already committed into git)
# eg.1. if you changed into `aa-application.properties`, you need to change below application name to `aa-application`
# eg.2. if you changed into `aa.properties`, you need to change below application name to `aa`
spring.application.name=microservice-b

# this is needed when we enable spring cloud config server with spring security for secure.
# if you don't add this below auth credentials, you can't connect to the config server.
spring.cloud.config.username=yewin
spring.cloud.config.password=pass

# below is config server url which will use to get properties file for this application.
# we can add optional for error connection to cloud config server,
# if we can't connect, we will use value from this properties file.
spring.config.import = optional:configserver:http://localhost:8888
# here you can use `spring.cloud.config.uri` and enable `boostrap.properties` file.
# but after spring 2.4.x, you can use above `spring.config.import` properties with optional feature.


# Most of the Spring boot actuator APIs are close by default including refresh api,
# So, we need to enable like below, you can also open other actuator APIs like emv, info, etc.
management.endpoints.web.exposure.include=refresh,health,env
# I do allow `refresh` api because we will use refresh properties which not to restart this application when we changed something in config properties file which are put at config folder repo.
# So, even you changed the value from properties file, you don't need to restart the application again to get those updated values.
# You just need to call refresh api to get updated values, http://localhost:8081/cloud-config-service-b/actuator/refresh
# But you need to commit that properties file to reach config repo first.

# you can allow all built-in endpoints by adding * like below which provided by spring boot actuator.
#management.endpoints.web.exposure.include=*


#below is default values which will use when this app can't connect to config server
app.config.test.value=this is demo value for service-b (from application, not from config server)
app.config.test.without-encrypted-value=test value without encrypted

# here, you can't use encrypted value like below `{cipher} key` because this properties file will only use as default when the config server is not running well.
# So, encryption won't be work as we added encrypted logic through config server.
app.config.test.with-encrypted-value=test value with encrypted for sensitive data as security
#app.config.test.encrypted-value={cipher}ab0f7db37f18740b3860168dbe23c50eb08478891448a0ca9865c9de16a02ee6e1098a5aadb39f0705dddc7206e13a387c78da8c7d00ed35a90f8e0a83498e2d41e2bd11f25e5d5557775b4c4e12bfaf


app.config.test.email-service-url=http://localhost:8080/email-service/
app.config.test.email-service-basic-auth-username=email admin
app.config.test.email-service-basic-auth-password={cipher}60a3abd36d60b6947fad9ed560634891f5aa0a94d23cb0ec516f288cc4be6d68d8703a4cd39010a81ad870b42c928d85

